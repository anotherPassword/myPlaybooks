#powershell variables test
---
- name: Set Environment and Variables
  hosts: all
  vars:
    #these are top level vars, can't populate 'surveyvars' as it is not top level?
    vmName: 
    OS: 
    Application: 
    Tier: 
    Environment: 
    Location: 
    SQL: 
    #action pshell script will perform
    pshellScriptAction: 
    #populate surveyVars with survey answers
    surveyVars:    
      ansible_VM_vmName: "{{vmName}}"
      ansible_CL_OS: "{{OS}}"
      ansible_CL_Application: "{{Application}}"
      ansible_CL_Tier: "{{Tier}}"
      ansible_CL_Environment: "{{Environment}}"
      ansible_CL_Location: "{{Location}}"
      ansible_CL_SQL: "{{SQL}}"
      vcenter_CL_availableSubnets: 
    # Disk object
    disk:
      - name: 
        size_gb: 
        type: thin
    # Network Adapter object
    networkAdapter:
      - name: 
        vlan: 
        device_type: 
        mac: 
        dvswitch_name: 
        start_connected: 
        type: 
        ip: 
        netmask: 
        gateway: 
        dns_servers: 
        domain: 
        wake_on_lan: 
        allow_guest_control: 
    #the template to build a VM with some defautl variables defined
    vm:
      annotation: This is a VM


  tasks:
  # Some script to dump vars to pshell, which writes to txt file and returns some stuff
  # as a test of what we are getting back and forth from here to powershell and back
  - name: "Run script '.ps1'"
    #Send dicts to powershell, they show up with u'*'. Powershell converts to json, 
    # then to pshell object for . notation, sets some values, sends back pure JSON
    win_shell: D:\scripts\outputValues.ps1 -vm "{{vm}}" #-userName '{{ ansible_user }}' -password '{{ ansible_password }}'
    register: result
  - name: Process win_shell output
    set_fact:
      vm: "{{ result.stdout | from_json }}"
  - name: Return Values
    debug:
      msg: "{{ vm }}"

#ORIGINAL FILE
#deploy VM 1st try

  #- name: 'set fact'
  #  set_fact: 
  #    pshellScriptAction: "getClusterBasedOnSurvey"
 
 ##########
