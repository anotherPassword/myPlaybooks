#powershell variables test
---
- name: "Include Vars"
  vars_files: 
    - vars.yml

- name: Set Environment and Variables
  hosts: all

  tasks:
 
 ##########
  - name: "set pshellScriptAction to getClusterBasedOnSurvey"
    set_fact:
      pshellScriptAction: getClusterBasedOnSurvey
  - name: "Run script 'ansible_deployVM.ps1' and get cluster based on Survey"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}' -vm "{{vm }}" -networkAdapter "{{networkAdapter}}" -disk "{{disk}}" 
    register: result
  
  - name: Process win_shell output
    set_fact:
      vm: "{{ result.stdout | from_json }}"
  
  - name: "the VM variable including Cluster Placement results are"
    debug: var=vm
  #########
  - name: "set pshellScriptAction to getNetworksForCluster"
    set_fact:
      pshellScriptAction: getNetworksForCluster
  - name: "Run script 'ansible_deployVM.ps1' and get cluster based on Survey"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}' -vm "{{vm }}" -networkAdapter "{{networkAdapter}}" -disk "{{disk}}" 
    register: result
  
  - name: Process win_shell output
    set_fact:
      surveyVars: "{{ result.stdout | from_json }}"
  
  - name: "the survey Vars are"
    debug: var=surveyVars
  ########
  - name: "set pshellScriptAction to getIPReservationForNetworkAdapter"
    set_fact:
      pshellScriptAction: getIPReservationForNetworkAdapter
  - name: "Run script 'ansible_deployVM.ps1' get IP reservation"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}' -vm "{{vm }}" -networkAdapter "{{networkAdapter}}" -disk "{{disk}}" 
    register: result
  
  - name: Process win_shell output ipam
    set_fact:
      vm: "{{ result.stdout | from_json }}"
  
  - name: "vm with attache adapter IS"
    debug: var=vm