#deploy VM 1st try
---
- name: "Deploy VM Try 01 - David Smith"
  hosts: all
  vars:
    vcenterVars:
      datacenterName: NTXMD
      notes: Created by Ansible      
    surveyVars:
      vmName: BSWANSBVMT01
      ansible_CL_OS: "Windows"
      ansible_CL_Application: "Gen-pop"
      ansible_CL_Tier: "1"
      ansible_CL_Environment: "Non-Production"
      ansible_CL_Location: "Temple"
      ansible_CL_SQL: "no"
    networkName: "VM Network"
    templateName: VRATD2016PTC
    clusterName: MD_CL11_GEN_POP_NONPROD
    group: group1
    
  tasks:
  # Take survey Vars dict and create list of concatenated key:value pairs
  - name: "Set Fact result_list"
    set_fact: 
      result_item: '{{ item.key }}:{{ item.value }}'
    with_dict:
      - '{{ surveyVars }}'
    register: result_list
  - name: "Build comma separated string"
    set_fact:
    # Build comma separated string of the key:value pairs to send to pshell powercli to make cluster
    # placement decision based on cluster attributes    
      csString: '{{ result_list.results | map(attribute="ansible_facts.result_item") | join(",") }}'
  - name: "Sending CS String"
    debug:
      var: csString
    #username: '{{ vcenter_username }}'
    #password: '{{ vcenter_password }}' 
  # send to pshell
  - name: "Run script 'ansible_selectClusterBasedOnSurvey.ps1'"
    win_shell: D:\scripts\vSphere\ansible_selectClusterBasedOnSurvey.ps1 -ansibleString '{{ csString }}' -userName '{{ ansible_user }}' -password '{{ ansible_password }}'
    register: pshellClusterPlacementResult
  
  - name: "set fact pshellClusterPlacementResult"
    set_fact: 
      destinationCluster: "{{ pshellClusterPlacementResult.stdout }}"
  
  - name: "the Cluster Placement results are"
    debug: var=destinationCluster

 # send to pshell
  - name: "Run script 'ansible_getBCIP_For_Reservation_Network.ps1'"
    win_shell: D:\scripts\IPAM\ansible_getNetworks_for_Cluster.ps1 -clusterName '{{ destinationCluster }}' -userName '{{ ansible_user }}' -password '{{ ansible_password }}'
    register: pshellNetworkResult
  
  - name: "set fact pshell"
    set_fact: 
      destinationCluster: "{{ pshellNetworkResult.stdout }}"
  
  - name: "the NETWORK results are"
    debug: var=pshellNetworkResult    
