#powershell variables test
---
- name: Set Environment and Variables
  hosts: all
  vars:
    #these are top level vars, can't populate 'surveyvars' as it is not top level?
    vmName: ""
    OS: ""
    Application: ""
    Tier: ""
    Environment: ""
    Location: ""
    SQL: ""
    #action pshell script will perform
    pshellScriptAction: ""
    #populate surveyVars with survey answers
    surveyVars:    
      ansible_VM_vmName: "{{vmName}}"
      ansible_CL_OS: "{{OS}}"
      ansible_CL_Application: "{{Application}}"
      ansible_CL_Tier: "{{Tier}}"
      ansible_CL_Environment: "{{Environment}}"
      ansible_CL_Location: "{{Location}}"
      ansible_CL_SQL: "{{SQL}}"
      vcenter_CL_availableSubnets: ""
    # Disk object
    disk:
      - name: ""
        size_gb: ""
        type: thin
    # Network Adapter object
    networkAdapter:
        name: ""
        vlan: ""
        device_type: vmxnet3
        mac: ""
        dvswitch_name: ""
        start_connected: 'True'
        type: static
        ip: ""
        netmask: ""
        gateway: ""
        dns_servers: ""
        domain: bhcs.pvt
        wake_on_lan: ""
        allow_guest_control: ""
    
    #the template to build a VM with some defautl variables defined
    vm:
      annotation: This is a VM
      cdrom:
        type: client
        iso_path: ""
        controller_type: ""
        state: ""
      cluster: ""
      convert: ""
      customization:
        existing_vm: 'False'
        dns_servers:
        - 10.7.200.95
        - 10.130.200.95
        dns_suffix: bhcs.pvt
        domain: bhcs.pvt
        hostname: ""
        autologon: ""
        autologoncount: ""
        domainadmin: ""
        domainadminpassword: ""
        fullname: ""
        joindomain: ""
        joinworkgroup: ""
        orgname: BHCS
        password: ""
        productid: ""
        runonce: ""
        timezone: '20'
      datacenter: ""
      disks: ""
      folder: ""
      force: ""
      hardware:
        hotadd_cpu: 'True'
        hotremove_cpu: ""
        hotadd_memory: 'True'
        memory_mb: ""
        num_cpus: ""
        num_cpu_cores_per_socket: ""
        scsi: ""
        version: ""
      is_template: ""
      networkAdapters: ""
      state: present
      template: ""
      validate_certs: 'False'
      wait_for_customization: 'yes'   

  tasks:
 
 ##########
  - name: "set pshellScriptAction to getClusterBasedOnSurvey"
    set_fact:
      pshellScriptAction: getClusterBasedOnSurvey
  - name: "Run script 'ansible_deployVM.ps1' and get cluster based on Survey"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}' -vm "{{vm }}" -networkAdapter "{{networkAdapter}}" -disk "{{disk}}" 
    register: result
  
  - name: Process win_shell output
    set_fact:
      vm: "{{ result.stdout | from_json }}"
  
  - name: "the VM variable including Cluster Placement results are"
    debug: var=vm
  #########
  - name: "set pshellScriptAction to getNetworksForCluster"
    set_fact:
      pshellScriptAction: getNetworksForCluster
  - name: "Run script 'ansible_deployVM.ps1' and get cluster based on Survey"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}' -vm "{{vm }}" -networkAdapter "{{networkAdapter}}" -disk "{{disk}}" 
    register: result
  
  - name: Process win_shell output
    set_fact:
      surveyVars: "{{ result.stdout | from_json }}"
  
  - name: "the survey Vars are"
    debug: var=surveyVars
  ########
  - name: "set pshellScriptAction to getIPReservationForNetworkAdapter"
    set_fact:
      pshellScriptAction: getIPReservationForNetworkAdapter
  - name: "Run script 'ansible_deployVM.ps1' and get cluster based on Survey"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}' -vm "{{vm }}" -networkAdapter "{{networkAdapter}}" -disk "{{disk}}" 
    register: result
  
  - name: Process win_shell output
    set_fact:
      vmAdapter: "{{ result.stdout | from_json }}"
  
  - name: "the IPAM results are"
    debug: var=vmAdapter