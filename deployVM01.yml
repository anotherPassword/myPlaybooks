#powershell variables test
---
- name: Set Environment and Variables
  hosts: all
  vars:
    #these are top level vars, can't populate 'surveyvars' as it is not top level?
    vmName: ""
    OS: ""
    Application: ""
    Tier: ""
    Environment: ""
    Location: ""
    SQL: ""
    #action pshell script will perform
    pshellScriptAction: ""
    #populate surveyVars with survey answers
    surveyVars:    
      ansible_VM_vmName: "{{vmName}}"
      ansible_CL_OS: "{{OS}}"
      ansible_CL_Application: "{{Application}}"
      ansible_CL_Tier: "{{Tier}}"
      ansible_CL_Environment: "{{Environment}}"
      ansible_CL_Location: "{{Location}}"
      ansible_CL_SQL: "{{SQL}}"
      vcenter_CL_availableSubnets: ""    
    #the template to build a VM with some defautl variables defined
    vm:
      annotation: This is a VM
      cdrom:
        type: client
        iso_path: ''
        controller_type: ''
        state: ''
      cluster: ''
      convert: ''
      customization:
        existing_vm: 'False'
        dns_servers:
        - 10.7.200.95
        - 10.130.200.95$$
        dns_suffix: bhcs.pvt
        domain: bhcs.pvt
        hostname: ''
        autologon: ''
        autologoncount: ''
        domainadmin: ''
        domainadminpassword: ''
        fullname: ''
        joindomain: ''
        joinworkgroup: ''
        orgname: BHCS
        password: ''
        productid: ''
        runonce: ''
        timezone: '20'
      datacenter: ''
      disks:
      - size_gb: ''
        type: thin
      folder: ''
      force: ''
      hardware:
        hotadd_cpu: 'True'
        hotremove_cpu: ''
        hotadd_memory: 'True'
        memory_mb: ''
        num_cpus: ''
        num_cpu_cores_per_socket: ''
        scsi: ''
        version: ''
      is_template: ''
      networks:
      - name: ''
        vlan: ''
        device_type: vmxnet3
        mac: ''
        dvswitch_name: ''
        start_connected: 'True'
        type: static
        ip: ''
        netmask: ''
        gateway: ''
        dns_servers: ''
        domain: bhcs.pvt
        wake_on_lan: ''
        allow_guest_control: ''
      state: present
      template: ''
      validate_certs: 'False'
      wait_for_customization: 'yes'   

  tasks:
  # Some script to dump vars to pshell, which writes to txt file and returns some stuff
  # as a test of what we are getting back and forth from here to powershell and back
  #- name: "Run script '.ps1'"
  #  #Send dicts to powershell, they show up with u'*'. Powershell converts to json, 
  #  # then to pshell object for . notation, sets some values, sends back pure JSON
  #  win_shell: D:\scripts\outputValues.ps1 -surveyVars "{{surveyVars }}" -vm "{{vm }}" #-userName '{{ ansible_user }}' -password '{{ ansible_password }}'
  #  register: result
  #- name: Process win_shell output
  #  set_fact:
  #    vm: "{{ result.stdout | from_json }}"
  #- name: Return Values
  #  debug:
  #    msg: "{{ vm }}"

#ORIGINAL FILE
#deploy VM 1st try

  #- name: 'set fact'
  #  set_fact: 
  #    pshellScriptAction: "getClusterBasedOnSurvey"
 
 ##########
  - name: "set pshellScriptAction to getClusterBasedOnSurvey"
    set_fact:
      pshellScriptAction: getClusterBasedOnSurvey
  - name: "Run script 'ansible_deployVM.ps1' and get cluster based on Survey"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -vm "{{vm }}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}'
    register: result
  
  - name: Process win_shell output
    set_fact:
      vm: "{{ result.stdout | from_json }}"
  
  - name: "the VM variable including Cluster Placement results are"
    debug: var=vm
  #########
  - name: "set pshellScriptAction to getNetworksForCluster"
    set_fact:
      pshellScriptAction: getNetworksForCluster
  - name: "Run script 'ansible_deployVM.ps1' and get cluster based on Survey"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -vm "{{vm}}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}'
    register: result
  
  - name: Process win_shell output
    set_fact:
      surveyVars: "{{ result.stdout | from_json }}"
  
  - name: "the survey Vars are"
    debug: var=surveyVars
  ########
  - name: "set pshellScriptAction to getIPReservationForNetwork"
    set_fact:
      pshellScriptAction: getIPReservationForNetwork
  - name: "Run script 'ansible_deployVM.ps1' and get cluster based on Survey"
    win_shell: D:\scripts\vSphere\ansible_deployVM.ps1 -pshellScriptAction "{{pshellScriptAction}}" -surveyVars "{{surveyVars }}" -vm "{{vm}}" -userName '{{ ansible_user }}' -password '{{ ansible_password }}'
    register: result
  
  - name: Process win_shell output
    set_fact:
      surveyVars: "{{ result.stdout | from_json }}"
  
  - name: "the VM variable including Cluster Placement results are"
    debug: var=vm